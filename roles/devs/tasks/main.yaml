- name: apt get tools
  become: true
  apt:
    name:
      - autoconf
      - build-essential
      - cmake
      - curl
      - git
      - libbz2-dev
      - libdb-dev
      - libffi-dev
      - libgdbm-dev
      - libgdbm6
      - libgmp-dev
      - liblzma-dev    
      - libncurses5-dev
      - libncursesw5-dev
      - libreadline-dev
      - libreadline6-dev
      - libsqlite3-dev
      - libssl-dev
      - libxml2-dev
      - libxmlsec1-dev
      - libyaml-dev
      - patch
      - tig
      - tk-dev
      - unzip
      - uuid-dev
      - wget
      - xz-utils
      - zlib1g-dev
    update_cache: yes

- name: Check cargo is installed
  shell: command -v cargo
  register: cargo_exists
  ignore_errors: yes
  changed_when: false

- name: Download rustup installer
  when: cargo_exists is failed
  get_url:
    url: https://sh.rustup.rs
    dest: /tmp/sh.rustup.rs
    mode: '0755'
    force: 'yes'
  tags:
    - rust

- name: Install rust/cargo
  when: cargo_exists is failed
  shell: /tmp/sh.rustup.rs -y
  tags:
    - rust

- name: create ~/bin directory
  file:
    path: "{{ ansible_env.HOME }}/bin"
    state: directory
    mode: '0755'

- name: add ~/bin to PATH
  lineinfile:
    path: "{{ ansible_env.HOME }}/.bashrc"
    line: "export PATH=$HOME/bin:$PATH"

- name: Download rtx bin file
  get_url:
    url: https://rtx.pub/rtx-latest-linux-x64
    dest: "{{ ansible_env.HOME }}/bin/rtx"
    mode: '0755'

- name: rtx bashrc
  lineinfile:
    path: "{{ ansible_env.HOME }}/.bashrc"
    line: "eval \"$(~/bin/rtx activate bash)\""

- name: install rtx items
  include: rtx_install.yaml
  with_items: "{{ rtx_items }}"

- name: install cargo items
  include: cargo_install.yaml
  with_items: "{{ cargo_items }}"

- name: starship .bashrc
  lineinfile:
    path: "{{ ansible_env.HOME }}/.bashrc"
    line: "eval \"$(starship init bash)\""

- name: starship config
  template:
    src: templates/starship.tpl
    dest: "{{ ansible_env.HOME }}/.config/starship.toml"
    mode: '0644'

- name: tigrc
  template:
    src: templates/tigrc.tpl
    dest: "{{ ansible_env.HOME }}/.tigrc"
    mode: '0644'

- name: gitconfig
  template:
    src: templates/gitconfig.tpl
    dest: "{{ ansible_env.HOME }}/.gitconfig.my"
    mode: '0644'

- name: include git config
  blockinfile:
    path: "{{ ansible_env.HOME }}/.gitconfig"
    block: |
      [include]
        path = "{{ ansible_env.HOME }}/.gitconfig.my"
    state: present

- name: nvim config(1)
  file:
    path: "{{ ansible_env.HOME }}/.config/nvim"
    state: directory
    mode: '0755'

- name: nvim config(2)
  template:
    src: templates/init.vim.tpl
    dest: "{{ ansible_env.HOME }}/.config/nvim/init.vim"
    mode: '0644'

- name: nvim config(3)
  pip:
    name: pynvim

- name: my.bash
  template:
    src: templates/my.bash.tpl
    dest: "{{ ansible_env.HOME }}/.my.bash"
    mode: "0644"

- name: source my.bash
  lineinfile:
    path: "{{ ansible_env.HOME }}/.bashrc"
    line: "[ -f ~/.my.bash ] && source ~/.my.bash"
