- name: apt get tools
  become: true
  apt:
    name:
      - autoconf
      - build-essential
      - cmake
      - curl
      - git
      - libdb-dev
      - libffi-dev
      - libgdbm-dev
      - libgdbm6
      - libgmp-dev
      - libncurses5-dev
      - libreadline6-dev
      - libssl-dev
      - libyaml-dev
      - patch
      - tig
      - unzip
      - uuid-dev
      - wget
      - zlib1g-dev
    update_cache: yes

- name: Check cargo is installed
  shell: command -v cargo
  register: cargo_exists
  ignore_errors: yes
  changed_when: false

- name: Download rustup installer
  when: cargo_exists is failed
  get_url:
    url: https://sh.rustup.rs
    dest: /tmp/sh.rustup.rs
    mode: '0755'
    force: 'yes'
  tags:
    - rust

- name: Install rust/cargo
  when: cargo_exists is failed
  shell: /tmp/sh.rustup.rs -y
  tags:
    - rust

- name: create ~/bin directory
  file:
    path: "{{ ansible_env.HOME }}/bin"
    state: directory
    mode: '0755'

- name: add ~/bin to PATH
  lineinfile:
    path: "{{ ansible_env.HOME }}/.bashrc"
    line: "export PATH=$HOME/bin:$PATH"

- name: Download rtx bin file
  get_url:
    url: https://rtx.pub/rtx-latest-linux-x64
    dest: "{{ ansible_env.HOME }}/bin/rtx"
    mode: '0755'

- name: rtx bashrc
  lineinfile:
    path: "{{ ansible_env.HOME }}/.bashrc"
    line: "eval \"$(~/bin/rtx activate bash)\""

- name: install rtx items
  include: rtx_install.yaml
  with_items: "{{ rtx_items }}"

- name: installed packages
  command: cargo install --list
  register: cargo_installed_packages
  changed_when: false

- name: install starship
  command: cargo install starship
  when: "'starship' not in cargo_installed_packages.stdout"

- name: starship .bashrc
  lineinfile:
    path: "{{ ansible_env.HOME }}/.bashrc"
    line: "eval \"$(starship init bash)\""

- name: starship config
  template:
    src: templates/starship.tpl
    dest: "{{ ansible_env.HOME }}/.config/starship.toml"
    mode: '0644'

- name: install ripgrep
  command: cargo install ripgrep
  when: "'ripgrep' not in cargo_installed_packages.stdout"

- name: install git-delta
  command: cargo install git-delta
  when: "'git-delta' not in cargo_installed_packages.stdout"

- name: check neovim version
  command: nvim --version
  register: check_nvim
  changed_when: false
  failed_when: false

- name: "install neovim {{ neovim_version }}"
  command: "rtx install neovim@{{ neovim_version }} -y"
  when: "(check_nvim.rc) != 0 or (neovim_version) not in (check_nvim.stdout)"

- name: "use -g neovim@{{ neovim_version }}"
  command: "rtx use -g neovim@{{ neovim_version }}"
  when: "(check_nvim.rc) != 0 or (neovim_version) not in (check_nvim.stdout)"

- name: check node version
  command: node --version
  register: check_node
  changed_when: false
  failed_when: false

- name: "install node {{ node_version }}"
  command: "rtx install node@{{ node_version }} -y"
  when: "(check_node.rc) != 0 or (node_version) not in (check_node.stdout)"

- name: " use -g node@{{ node_version  }}"
  command: "rtx use -g node@{{ node_version }}"
  when: "(check_node.rc) != 0 or (node_version) not in (check_node.stdout)"

- name: check yarn version
  command: yarn --version
  register: check_yarn
  changed_when: false
  failed_when: false

- name: "install yarn {{ yarn_version }}"
  command: "rtx install yarn@{{ yarn_version }} -y"
  when: "(check_yarn.rc) != 0 or (yarn_version) not in (check_yarn.stdout)"

- name: "use yarn {{ yarn_version }}"
  command: "rtx use -g yarn@{{ yarn_version }}"
  when: "(check_yarn.rc) != 0 or (yarn_version) not in (check_yarn.stdout)"

- name: check ruby version
  command: ruby --version
  register: check_ruby
  changed_when: false
  failed_when: false

- name: "install ruby {{ ruby_version }}"
  command: "rtx install ruby@{{ ruby_version }} -y"
  when: "(check_ruby.rc) != 0 or (ruby_version) not in (check_ruby.stdout)"

- name: "use ruby {{ ruby_version }}"
  command: "rtx use -g ruby@{{ ruby_version }}"
  when: "(check_ruby.rc) != 0 or (ruby_version) not in (check_ruby.stdout)"
